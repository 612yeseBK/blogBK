<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>vue-cil搭建</title>
      <link href="/2019/03/18/vue-cil%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/03/18/vue-cil%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用搭建vue-cil的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>安装vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>创建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack myproject</span><br></pre></td></tr></table></figure><p>打开项目</p><p>我使用的是WebStrom工具打开</p><p>如下图是目录结构：</p><p><img src="/2019/03/18/vue-cil搭建/1.png" alt="1"></p><p>修改HelloWorld.vue文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   hello world!</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/18/vue-cil搭建/2.png" alt="2"></p><p>运行程序</p><p><img src="/2019/03/18/vue-cil搭建/2-1.png" alt="2-1"></p><p>打开浏览器</p><p><img src="/2019/03/18/vue-cil搭建/3.png" alt="3"></p><p>引入第三方插件Element-UI</p><p><img src="/2019/03/18/vue-cil搭建/C:/Users/gyong/AppData/Local/Temp/1552912956348.png" alt="1552912956348"></p><p>全局注册与引用</p><p><img src="/2019/03/18/vue-cil搭建/5.png" alt="5"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import ElementUI from &apos;element-ui&apos;</span><br><span class="line">import &apos;element-ui/lib/theme-chalk/index.css&apos;</span><br><span class="line">import CollapseTransition from &apos;element-ui/lib/transitions/collapse-transition&apos;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line">Vue.use(CollapseTransition)</span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>界面效果如下<img src="/2019/03/18/vue-cil搭建/6.png" alt="6"></p></the>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-cil </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spingBoot极简搭建</title>
      <link href="/2019/03/18/spingboot%E6%9E%81%E7%AE%80%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/03/18/spingboot%E6%9E%81%E7%AE%80%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用idea去快速构建springboot的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows10</span><br></pre></td></tr></table></figure><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><p><img src="/2019/03/18/spingboot极简搭建/1.png" alt="1"></p><p><img src="/2019/03/18/spingboot极简搭建/2.png" alt="2"></p><p><img src="/2019/03/18/spingboot极简搭建/3.png" alt="3"></p><p><img src="/2019/03/18/spingboot极简搭建/4.png" alt="4"></p><p><img src="/2019/03/18/spingboot极简搭建/5.png" alt="5"></p><p>由此可以搭建完成，目录结构如下</p><p><img src="/2019/03/18/spingboot极简搭建/6.png" alt="6"></p><h1 id="HelloWorld搭建"><a href="#HelloWorld搭建" class="headerlink" title="HelloWorld搭建"></a>HelloWorld搭建</h1><p>新建文件夹controller和文件UploadController.java</p><p><img src="/2019/03/18/spingboot极简搭建/7.png" alt="7"></p><p>在UploadController里写入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    public String index()&#123;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/18/spingboot极简搭建/7-1.png" alt="7-1"></p><p>将配置文件的后缀改成yml</p><p><img src="/2019/03/18/spingboot极简搭建/8.png" alt="8"></p><p>添加端口配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br></pre></td></tr></table></figure><p><img src="/2019/03/18/spingboot极简搭建/9.png" alt="9"></p><p>启动程序，打开浏览器访问8001端口，可见如下页面</p><p><img src="/2019/03/18/spingboot极简搭建/10.png" alt="10"></p></the>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue+element-ui+springboot上传实例</title>
      <link href="/2019/03/18/vue-element-ui-springboot%E4%B8%8A%E4%BC%A0%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/03/18/vue-element-ui-springboot%E4%B8%8A%E4%BC%A0%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用xxx去xxxxx<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>参考来源：<a href="https://blog.csdn.net/TyCoding/article/details/82904715" target="_blank" rel="noopener">https://blog.csdn.net/TyCoding/article/details/82904715</a></p><h1 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  class=&quot;upload-demo&quot;</span><br><span class="line">  action=&quot;http://127.0.0.1:8888/uploadFile/&quot;</span><br><span class="line">  name=&quot;file&quot;</span><br><span class="line">  :multiple=&quot;false&quot;</span><br><span class="line">  :limit=1</span><br><span class="line">  :show-file-list=&quot;false&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;div class=&quot;classBox fucBox&quot; @click=&quot;addArticle&quot;&gt;</span><br><span class="line">  &lt;i class=&quot;el-icon-plus&quot; style=&quot;font-size: 70px;margin-left: 14px;margin-top: 20px&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;p style=&quot;margin-top: 40px;margin-left: 12px&quot;&gt;文书新增&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>其中参数介绍：</p><p>参数<strong>name</strong> 表示当前组件上传的文件字段名，需要和后端的上传接口字段名相同 </p><p>参数<strong>action</strong> 表示此上传组件对应的上传接口，此时我们使用的是后端Controller定义的接口 </p><h1 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    @CrossOrigin</span><br><span class="line">    @RequestMapping(value = &quot;/uploadFile&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public void uploadFile(@RequestParam(&quot;file&quot;) MultipartFile picture, HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">//        String path = request.getSession().getServletContext().getRealPath(&quot;/upload&quot;);</span><br><span class="line">        String path = &quot;E:\\myspace\\毕业设计\\工程部分\\addDir&quot;;</span><br><span class="line">        File filePath = new File(path);</span><br><span class="line">        System.out.println(&quot;文件的保存路径：&quot; + path);</span><br><span class="line">        if (!filePath.exists() &amp;&amp; !filePath.isDirectory()) &#123;</span><br><span class="line">            System.out.println(&quot;目录不存在，创建目录:&quot; + filePath);</span><br><span class="line">            filePath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取原始文件名称(包含格式)</span><br><span class="line">        String originalFileName = picture.getOriginalFilename();</span><br><span class="line">        System.out.println(&quot;原始文件名称：&quot; + originalFileName);</span><br><span class="line"></span><br><span class="line">        //获取文件类型，以最后一个`.`为标识</span><br><span class="line">        String type = originalFileName.substring(originalFileName.lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">        System.out.println(&quot;文件类型：&quot; + type);</span><br><span class="line">        //获取文件名称（不包含格式）</span><br><span class="line">        String name = originalFileName.substring(0, originalFileName.lastIndexOf(&quot;.&quot;));</span><br><span class="line"></span><br><span class="line">        //设置文件新名称: 当前时间+文件名称（不包含格式）</span><br><span class="line">        Date d = new Date();</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);</span><br><span class="line">        String date = sdf.format(d);</span><br><span class="line">        String fileName = date + name + &quot;.&quot; + type;</span><br><span class="line">        System.out.println(&quot;新文件名称：&quot; + fileName);</span><br><span class="line"></span><br><span class="line">        //在指定路径下创建一个文件</span><br><span class="line">        File targetFile = new File(path, fileName);</span><br><span class="line"></span><br><span class="line">        //将文件保存到服务器指定位置</span><br><span class="line">        try &#123;</span><br><span class="line">            picture.transferTo(targetFile);</span><br><span class="line">            System.out.println(&quot;上传成功&quot;);</span><br><span class="line">            //将文件在服务器的存储路径返回</span><br><span class="line">            return;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;上传失败&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：@CrossOrigin是为了解决跨域访问的问题</p><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h1><p><img src="/2019/03/18/vue-element-ui-springboot上传实例/1.png" alt="1"></p><p>点击选择某一个文件即可实现上传。</p></the>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>批处理提示文字的颜色设置</title>
      <link href="/2018/11/26/%E6%89%B9%E5%A4%84%E7%90%86%E6%8F%90%E7%A4%BA%E6%96%87%E5%AD%97%E7%9A%84%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/11/26/%E6%89%B9%E5%A4%84%E7%90%86%E6%8F%90%E7%A4%BA%E6%96%87%E5%AD%97%E7%9A%84%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何给windows批处理的输出的某一行文字加颜色的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">echo &quot;begin to backup&quot;</span><br><span class="line">xcopy . ..\blogBK /s /e /y /EXCLUDE:.\exclude.ins</span><br><span class="line">cd ..\blogBK</span><br><span class="line">echo begin to commit to github</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;backup commit&quot;</span><br><span class="line">git push origin master</span><br><span class="line">cd ..\blog</span><br><span class="line">set &quot;t=备份完成，请按任意键退出......&quot;</span><br><span class="line">call :loop</span><br><span class="line">echo.</span><br><span class="line">pause&gt;nul</span><br><span class="line">goto :eof</span><br><span class="line"></span><br><span class="line">:loop</span><br><span class="line">if not &quot;!t!&quot;==&quot;&quot; (</span><br><span class="line">&gt; &quot;!t!_&quot;,set /p &quot;=   &quot;&lt;nul</span><br><span class="line">findstr /a:02 .* &quot;!t!_*&quot; 2&gt;nul</span><br><span class="line">::ping -n 1 127.1&gt;nul</span><br><span class="line">del &quot;!t!_&quot;</span><br><span class="line">)</span><br><span class="line">goto :eof</span><br></pre></td></tr></table></figure><p>看过程是生成了一个名称为”t_”的文件，然后使用findstr命令将文件名输出，这时候可以给它一个颜色 /a:02就是显示文件名的颜色，然后删掉了这个文件</p></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装tensorflow_gpu-1.9之五tensorflowGPU</title>
      <link href="/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%BA%94tensorflowGPU/"/>
      <url>/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%BA%94tensorflowGPU/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何在ubuntu系统里面安装tensorflow-gpu-1.9的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>参考：<a href="https://blog.csdn.net/davidhopper/article/details/81206673" target="_blank" rel="noopener">https://blog.csdn.net/davidhopper/article/details/81206673</a></p><p><a href="https://blog.ailemon.me/2017/06/06/install-tensorflow-gpu-on-ubuntu-linux/" target="_blank" rel="noopener">https://blog.ailemon.me/2017/06/06/install-tensorflow-gpu-on-ubuntu-linux/</a></p><h1 id="激活anaconda子环境"><a href="#激活anaconda子环境" class="headerlink" title="激活anaconda子环境"></a><strong>激活anaconda子环境</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate tfgpu</span><br></pre></td></tr></table></figure><h1 id="升级更新pip"><a href="#升级更新pip" class="headerlink" title="升级更新pip"></a><strong>升级更新pip</strong></h1><p>如果本机未安装python和pip，则安装之</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip python-dev</span><br></pre></td></tr></table></figure><p>更新pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -U pip</span><br></pre></td></tr></table></figure><p>升级pip并添加别的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line"></span><br><span class="line">vi ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>添加如下内容并保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global] index-url=http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line">[install] trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h1 id="安装tensorflow-gpu-1-9-0"><a href="#安装tensorflow-gpu-1-9-0" class="headerlink" title="安装tensorflow-gpu 1.9.0"></a><strong>安装tensorflow-gpu 1.9.0</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==1.9.0</span><br></pre></td></tr></table></figure><p>测试tensorflowGPU是否使用了GPU</p><p>import tensorflow as tf<br>tf.test.is_gpu_available()</p><p>如果输出true，则表示GPU正常运行了</p><p>\&lt; &lt; &lt;True</p><p>下面是当时控制台的一些信息，记录一下，这个True字很令人开心</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ mkdir ~/.pip</span><br><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ vi ~/.pip/pip.conf</span><br><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ vim ~/.pip/pip.conf</span><br><span class="line">The program &apos;vim&apos; can be found in the following packages:</span><br><span class="line"></span><br><span class="line">- vim</span><br><span class="line">- vim-gnome</span><br><span class="line">- vim-tiny</span><br><span class="line">- vim-athena</span><br><span class="line">- vim-athena-py2</span><br><span class="line">- vim-gnome-py2</span><br><span class="line">- vim-gtk</span><br><span class="line">- vim-gtk-py2</span><br><span class="line">- vim-gtk3</span><br><span class="line">- vim-gtk3-py2</span><br><span class="line">- vim-nox</span><br><span class="line">- vim-nox-py2</span><br><span class="line">  Try: sudo apt install &lt;selected package&gt;</span><br><span class="line">  (tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ vi ~/.pip/pip.conf</span><br><span class="line">  (tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ sudo gedit ~/.pip/pip.conf </span><br><span class="line"></span><br><span class="line">(gedit:9177): Gtk-WARNING **: Calling Inhibit failed: GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown: The name org.gnome.SessionManager was not provided by any .service files</span><br><span class="line"></span><br><span class="line">** (gedit:9177): WARNING **: Set document metadata failed: Setting attribute metadata::gedit-spell-enabled not supported</span><br><span class="line"></span><br><span class="line">** (gedit:9177): WARNING **: Set document metadata failed: Setting attribute metadata::gedit-encoding not supported</span><br><span class="line"></span><br><span class="line">** (gedit:9177): WARNING **: Set document metadata failed: Setting attribute metadata::gedit-position not supported</span><br><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ sudo pip install -U pip</span><br><span class="line">sudo: pip: command not found</span><br><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ sudo apt-get install python-pip python-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  libpython-all-dev libpython-dev libpython2.7-dev python-all python-all-dev python-pkg-resources python-setuptools python-wheel python2.7-dev</span><br><span class="line">Suggested packages:</span><br><span class="line">  python-setuptools-doc</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libpython-all-dev libpython-dev libpython2.7-dev python-all python-all-dev python-dev python-pip python-pkg-resources python-setuptools python-wheel python2.7-dev</span><br><span class="line">0 upgraded, 11 newly installed, 0 to remove and 3 not upgraded.</span><br><span class="line">Need to get 28.6 MB of archives.</span><br><span class="line">After this operation, 43.1 MB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y/n] y</span><br><span class="line">Get:1 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 libpython2.7-dev amd64 2.7.12-1ubuntu0~16.04.4 [27.8 MB]</span><br><span class="line">Get:2 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 libpython-dev amd64 2.7.12-1~16.04 [7,840 B]</span><br><span class="line">Get:3 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 libpython-all-dev amd64 2.7.12-1~16.04 [1,006 B]</span><br><span class="line">Get:4 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 python-all amd64 2.7.12-1~16.04 [996 B]</span><br><span class="line">Get:5 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 python2.7-dev amd64 2.7.12-1ubuntu0~16.04.4 [276 kB]</span><br><span class="line">Get:6 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 python-dev amd64 2.7.12-1~16.04 [1,186 B]</span><br><span class="line">Get:7 http://mirrors.nju.edu.cn/ubuntu xenial-updates/main amd64 python-all-dev amd64 2.7.12-1~16.04 [1,016 B]</span><br><span class="line">Get:8 http://mirrors.nju.edu.cn/ubuntu xenial-updates/universe amd64 python-pip all 8.1.1-2ubuntu0.4 [144 kB]</span><br><span class="line">Get:9 http://mirrors.nju.edu.cn/ubuntu xenial/main amd64 python-pkg-resources all 20.7.0-1 [108 kB]</span><br><span class="line">Get:10 http://mirrors.nju.edu.cn/ubuntu xenial/main amd64 python-setuptools all 20.7.0-1 [169 kB]</span><br><span class="line">Get:11 http://mirrors.nju.edu.cn/ubuntu xenial/universe amd64 python-wheel all 0.29.0-1 [48.0 kB]</span><br><span class="line">Fetched 28.6 MB in 3s (7,260 kB/s)       </span><br><span class="line">Selecting previously unselected package libpython2.7-dev:amd64.</span><br><span class="line">(Reading database ... 217001 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libpython2.7-dev_2.7.12-1ubuntu0~16.04.4_amd64.deb ...</span><br><span class="line">Unpacking libpython2.7-dev:amd64 (2.7.12-1ubuntu0~16.04.4) ...</span><br><span class="line">Selecting previously unselected package libpython-dev:amd64.</span><br><span class="line">Preparing to unpack .../libpython-dev_2.7.12-1~16.04_amd64.deb ...</span><br><span class="line">Unpacking libpython-dev:amd64 (2.7.12-1~16.04) ...</span><br><span class="line">Selecting previously unselected package libpython-all-dev:amd64.</span><br><span class="line">Preparing to unpack .../libpython-all-dev_2.7.12-1~16.04_amd64.deb ...</span><br><span class="line">Unpacking libpython-all-dev:amd64 (2.7.12-1~16.04) ...</span><br><span class="line">Selecting previously unselected package python-all.</span><br><span class="line">Preparing to unpack .../python-all_2.7.12-1~16.04_amd64.deb ...</span><br><span class="line">Unpacking python-all (2.7.12-1~16.04) ...</span><br><span class="line">Selecting previously unselected package python2.7-dev.</span><br><span class="line">Preparing to unpack .../python2.7-dev_2.7.12-1ubuntu0~16.04.4_amd64.deb ...</span><br><span class="line">Unpacking python2.7-dev (2.7.12-1ubuntu0~16.04.4) ...</span><br><span class="line">Selecting previously unselected package python-dev.</span><br><span class="line">Preparing to unpack .../python-dev_2.7.12-1~16.04_amd64.deb ...</span><br><span class="line">Unpacking python-dev (2.7.12-1~16.04) ...</span><br><span class="line">Selecting previously unselected package python-all-dev.</span><br><span class="line">Preparing to unpack .../python-all-dev_2.7.12-1~16.04_amd64.deb ...</span><br><span class="line">Unpacking python-all-dev (2.7.12-1~16.04) ...</span><br><span class="line">Selecting previously unselected package python-pip.</span><br><span class="line">Preparing to unpack .../python-pip_8.1.1-2ubuntu0.4_all.deb ...</span><br><span class="line">Unpacking python-pip (8.1.1-2ubuntu0.4) ...</span><br><span class="line">Selecting previously unselected package python-pkg-resources.</span><br><span class="line">Preparing to unpack .../python-pkg-resources_20.7.0-1_all.deb ...</span><br><span class="line">Unpacking python-pkg-resources (20.7.0-1) ...</span><br><span class="line">Selecting previously unselected package python-setuptools.</span><br><span class="line">Preparing to unpack .../python-setuptools_20.7.0-1_all.deb ...</span><br><span class="line">Unpacking python-setuptools (20.7.0-1) ...</span><br><span class="line">Selecting previously unselected package python-wheel.</span><br><span class="line">Preparing to unpack .../python-wheel_0.29.0-1_all.deb ...</span><br><span class="line">Unpacking python-wheel (0.29.0-1) ...</span><br><span class="line">Processing triggers for man-db (2.7.5-1) ...</span><br><span class="line">Setting up libpython2.7-dev:amd64 (2.7.12-1ubuntu0~16.04.4) ...</span><br><span class="line">Setting up libpython-dev:amd64 (2.7.12-1~16.04) ...</span><br><span class="line">Setting up libpython-all-dev:amd64 (2.7.12-1~16.04) ...</span><br><span class="line">Setting up python-all (2.7.12-1~16.04) ...</span><br><span class="line">Setting up python2.7-dev (2.7.12-1ubuntu0~16.04.4) ...</span><br><span class="line">Setting up python-dev (2.7.12-1~16.04) ...</span><br><span class="line">Setting up python-all-dev (2.7.12-1~16.04) ...</span><br><span class="line">Setting up python-pip (8.1.1-2ubuntu0.4) ...</span><br><span class="line">Setting up python-pkg-resources (20.7.0-1) ...</span><br><span class="line">Setting up python-setuptools (20.7.0-1) ...</span><br><span class="line">Setting up python-wheel (0.29.0-1) ...</span><br><span class="line"></span><br><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ pip install tensorflow-gpu==1.9.0</span><br><span class="line">Looking in indexes: http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">Collecting tensorflow-gpu==1.9.0</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/f1/3b/f24b243038db1c6c73acddd4c5f1497e2de596f381fe76d1f80204b0fa21/tensorflow_gpu-1.9.0-cp35-cp35m-manylinux1_x86_64.whl (229.6MB)</span><br><span class="line">    100% |████████████████████████████████| 229.6MB 3.2MB/s </span><br><span class="line">Collecting protobuf&gt;=3.4.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/bf/d4/db7296a1407cad69f043537ba1e05afab3646451a066ead7a314d8714388/protobuf-3.6.1-cp35-cp35m-manylinux1_x86_64.whl (1.1MB)</span><br><span class="line">    100% |████████████████████████████████| 1.1MB 12.8MB/s </span><br><span class="line">Collecting grpcio&gt;=1.8.6 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/90/b4/ce6b50cd30a07a13143eec055c9737573916327217fbe243e38856e2ab95/grpcio-1.16.1-cp35-cp35m-manylinux1_x86_64.whl (9.7MB)</span><br><span class="line">    100% |████████████████████████████████| 9.7MB 7.4MB/s </span><br><span class="line">Collecting six&gt;=1.10.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl</span><br><span class="line">Collecting absl-py&gt;=0.1.6 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/0c/63/f505d2d4c21db849cf80bad517f0065a30be6b006b0a5637f1b95584a305/absl-py-0.6.1.tar.gz (94kB)</span><br><span class="line">    100% |████████████████████████████████| 102kB 10.5MB/s </span><br><span class="line">Collecting gast&gt;=0.2.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/5c/78/ff794fcae2ce8aa6323e789d1f8b3b7765f601e7702726f430e814822b96/gast-0.2.0.tar.gz</span><br><span class="line">Collecting numpy&gt;=1.13.3 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/86/04/bd774106ae0ae1ada68c67efe89f1a16b2aa373cc2db15d974002a9f136d/numpy-1.15.4-cp35-cp35m-manylinux1_x86_64.whl (13.8MB)</span><br><span class="line">    100% |████████████████████████████████| 13.8MB 2.7MB/s </span><br><span class="line">Collecting astor&gt;=0.6.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/35/6b/11530768cac581a12952a2aad00e1526b89d242d0b9f59534ef6e6a1752f/astor-0.7.1-py2.py3-none-any.whl</span><br><span class="line">Collecting setuptools&lt;=39.1.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/8c/10/79282747f9169f21c053c562a0baa21815a8c7879be97abd930dbcf862e8/setuptools-39.1.0-py2.py3-none-any.whl (566kB)</span><br><span class="line">    100% |████████████████████████████████| 573kB 13.8MB/s </span><br><span class="line">Collecting tensorboard&lt;1.10.0,&gt;=1.9.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/9e/1f/3da43860db614e294a034e42d4be5c8f7f0d2c75dc1c428c541116d8cdab/tensorboard-1.9.0-py3-none-any.whl (3.3MB)</span><br><span class="line">    100% |████████████████████████████████| 3.3MB 9.3MB/s </span><br><span class="line">Requirement already satisfied: wheel&gt;=0.26 in ./anaconda3/envs/tfgpu/lib/python3.5/site-packages (from tensorflow-gpu==1.9.0) (0.31.1)</span><br><span class="line">Collecting termcolor&gt;=1.1.0 (from tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/8a/48/a76be51647d0eb9f10e2a4511bf3ffb8cc1e6b14e9e4fab46173aa79f981/termcolor-1.1.0.tar.gz</span><br><span class="line">Collecting werkzeug&gt;=0.11.10 (from tensorboard&lt;1.10.0,&gt;=1.9.0-&gt;tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)</span><br><span class="line">    100% |████████████████████████████████| 327kB 9.1MB/s </span><br><span class="line">Collecting markdown&gt;=2.6.8 (from tensorboard&lt;1.10.0,&gt;=1.9.0-&gt;tensorflow-gpu==1.9.0)</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/7a/6b/5600647404ba15545ec37d2f7f58844d690baf2f81f3a60b862e48f29287/Markdown-3.0.1-py2.py3-none-any.whl (89kB)</span><br><span class="line">    100% |████████████████████████████████| 92kB 7.8MB/s </span><br><span class="line">Building wheels for collected packages: absl-py, gast, termcolor</span><br><span class="line">  Running setup.py bdist_wheel for absl-py ... done</span><br><span class="line">  Stored in directory: /home/gyw/.cache/pip/wheels/aa/4d/58/b32b9fecc4f448dce09a02441f823fe46f70cab32285304553</span><br><span class="line">  Running setup.py bdist_wheel for gast ... done</span><br><span class="line">  Stored in directory: /home/gyw/.cache/pip/wheels/17/0a/dc/bb6d7b129029482a8d55901d66b65e756a681f6a1da7297a9b</span><br><span class="line">  Running setup.py bdist_wheel for termcolor ... done</span><br><span class="line">  Stored in directory: /home/gyw/.cache/pip/wheels/65/c8/98/8361afe9bafba434b7acf14c08627560d63018272226ff3e10</span><br><span class="line">Successfully built absl-py gast termcolor</span><br><span class="line">Installing collected packages: setuptools, six, protobuf, grpcio, absl-py, gast, numpy, astor, werkzeug, markdown, tensorboard, termcolor, tensorflow-gpu</span><br><span class="line">  Found existing installation: setuptools 40.2.0</span><br><span class="line">    Uninstalling setuptools-40.2.0:</span><br><span class="line">      Successfully uninstalled setuptools-40.2.0</span><br><span class="line">Successfully installed absl-py-0.6.1 astor-0.7.1 gast-0.2.0 grpcio-1.16.1 markdown-3.0.1 numpy-1.15.4 protobuf-3.6.1 setuptools-39.1.0 six-1.11.0 tensorboard-1.9.0 tensorflow-gpu-1.9.0 termcolor-1.1.0 werkzeug-0.14.1</span><br><span class="line">You are using pip version 10.0.1, however version 18.1 is available.</span><br><span class="line">You should consider upgrading via the &apos;pip install --upgrade pip&apos; command.</span><br><span class="line">(tfgpu) gyw@gyw-HP-Pavilion-Notebook:~$ python</span><br><span class="line">Python 3.5.6 |Anaconda, Inc.| (default, Aug 26 2018, 21:41:56) </span><br><span class="line">[GCC 7.3.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; import tensorflow as tf</span><br><span class="line">&gt; &gt; &gt; tf.test.is_gpu_available()</span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.273136: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA</span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.600329: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:897] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero</span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.601321: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1392] Found device 0 with properties: </span><br><span class="line">&gt; &gt; &gt; name: GeForce GTX 1050 major: 6 minor: 1 memoryClockRate(GHz): 1.493</span><br><span class="line">&gt; &gt; &gt; pciBusID: 0000:01:00.0</span><br><span class="line">&gt; &gt; &gt; totalMemory: 1.95GiB freeMemory: 1.68GiB</span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.601373: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1471] Adding visible gpu devices: 0</span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.837880: I tensorflow/core/common_runtime/gpu/gpu_device.cc:952] Device interconnect StreamExecutor with strength 1 edge matrix:</span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.837934: I tensorflow/core/common_runtime/gpu/gpu_device.cc:958]      0 </span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.837942: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] 0:   N </span><br><span class="line">&gt; &gt; &gt; 2018-11-23 16:29:05.838148: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1084] Created TensorFlow device (/device:GPU:0 with 1440 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1)</span><br><span class="line">&gt; &gt; &gt; True</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> tensorflow安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflowgpu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装tensorflow_gpu-1.9之四Anaconda</title>
      <link href="/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E5%9B%9BAnaconda/"/>
      <url>/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E5%9B%9BAnaconda/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何在ubuntu系统上安装anaconda的说明<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="下载anaconda"><a href="#下载anaconda" class="headerlink" title="下载anaconda"></a><strong>下载anaconda</strong></h1><p>网址：<a href="https://www.anaconda.com/download/#linux" target="_blank" rel="noopener">https://www.anaconda.com/download/#linux</a></p><p>我的百度网盘也有一份</p><p>链接：<a href="https://pan.baidu.com/s/1QGlqvmIYl-EhoIoCKSjwRw" target="_blank" rel="noopener">https://pan.baidu.com/s/1QGlqvmIYl-EhoIoCKSjwRw</a><br>提取码：xvgj </p><h1 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a><strong>安装anaconda</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-4.3.1-Linux-x86.sh</span><br></pre></td></tr></table></figure><p>在安装的过程中，会问你安装路径，直接回车默认就可以了。有个地方问你是否将anaconda安装路径加入到环境变量（.bashrc)中，输入yes，默认的是no </p><p>如果没输入就要配置环境，根据提示，在终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure><p>打开profile文件。添加语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/&#123;你的用户名&#125;/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>保存，退出。 </p><p>重启才可以生效</p><h1 id="创建子环境"><a href="#创建子环境" class="headerlink" title="创建子环境"></a><strong>创建子环境</strong></h1><p>创建名为tfgpu，python版本3.5的子环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tfgpu pytohn==3.5</span><br></pre></td></tr></table></figure><p>进入子环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate tfgpu</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> tensorflow安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装tensorflow_gpu-1.9之三cudnn7.3</title>
      <link href="/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%B8%89cudnn7-3/"/>
      <url>/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%B8%89cudnn7-3/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何在ubuntu系统里面安装cudnn的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="下载cudnn"><a href="#下载cudnn" class="headerlink" title="下载cudnn"></a><strong>下载cudnn</strong></h1><p>首先到官网下载<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">cuDNN5.1</a> （ <a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a> ），需要注册为开发者才能下载，而且直接下载可能速度非常慢，如果有别人已经下载过的，应该是可以直接拿过来用</p><p>我的是7.3的，有需要可以直接用</p><p>链接：<a href="https://pan.baidu.com/s/1EdlVmSal4vE8L_EwrJUxZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1EdlVmSal4vE8L_EwrJUxZg</a><br>提取码：bqqi </p><h1 id="解压配置"><a href="#解压配置" class="headerlink" title="解压配置"></a><strong>解压配置</strong></h1><p>下载完成之后解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvzf cudnn-8.0-linux-x64-v5.1.tgz</span><br></pre></td></tr></table></figure><p>移动文件到cuda文件夹里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line"></span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure><p>修改文件访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><p>这里不做测试</p></the>]]></content>
      
      
      <categories>
          
          <category> tensorflow安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cudnn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装tensorflow_gpu-1.9之二cuda9.0</title>
      <link href="/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%BA%8Ccuda9-0/"/>
      <url>/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%BA%8Ccuda9-0/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何在ubuntu系统上安装cuda9.0的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>承接上文之一</p><p>首先下载cuda9.0，这里是官网连接 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a></p><p>我的是9.0，给个网盘链接这儿</p><p>链接：<a href="https://pan.baidu.com/s/1z9jHGM0-6HQauRHRwniZpw" target="_blank" rel="noopener">https://pan.baidu.com/s/1z9jHGM0-6HQauRHRwniZpw</a><br>提取码：luvf </p><h1 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a><strong>安装CUDA</strong></h1><p>下载完之后就是安装cuda 以下命令执行(需要在cuda下载目录下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_8.0.61_375.26_linux.run</span><br></pre></td></tr></table></figure><p>就进入安装了，开始的一大堆文字都是End User License Agreement，可以CTRL +C 跳过，然后输入accept表示接受协议</p><p>接下来就是安装的交互界面，根据提示一步一步进行就好。</p><p>在开始的</p><p>Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 367.48?</p><p>选择n，因为已经安装驱动了。</p><p>最终提示Incomplete installation!不是代表失败了，而是还有一些变量要添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">Using more to view the EULA.</span><br><span class="line"></span><br><span class="line">End User License Agreement</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line">Preface</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">The following contains specific license terms and conditions</span><br><span class="line"></span><br><span class="line">for four separate NVIDIA products. By accepting this</span><br><span class="line"></span><br><span class="line">agreement, you agree to comply with all the terms and</span><br><span class="line"></span><br><span class="line">conditions applicable to the specific product(s) included</span><br><span class="line"></span><br><span class="line">herein.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIDIA CUDA Toolkit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Description</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">The NVIDIA CUDA Toolkit provides command-line and graphical</span><br><span class="line"></span><br><span class="line">tools for building, debugging and optimizing the performance</span><br><span class="line"></span><br><span class="line">of applications accelerated by NVIDIA GPUs, runtime and math</span><br><span class="line"></span><br><span class="line">libraries, and documentation including programming guides,</span><br><span class="line"></span><br><span class="line">user manuals, and API references. The NVIDIA CUDA Toolkit</span><br><span class="line"></span><br><span class="line">License Agreement is available in Chapter 1.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Default Install Location of CUDA Toolkit</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Windows platform:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Do you accept the previously read EULA?</span><br><span class="line"></span><br><span class="line">accept/decline/quit: accept</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 367.48?</span><br><span class="line"></span><br><span class="line">(y)es/(n)o/(q)uit: n</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Install the CUDA 8.0 Toolkit?</span><br><span class="line"></span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Enter Toolkit Location</span><br><span class="line"></span><br><span class="line"> [ default is /usr/local/cuda-8.0 ]: </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Do you want to install a symbolic link at /usr/local/cuda?</span><br><span class="line"></span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Install the CUDA 8.0 Samples?</span><br><span class="line"></span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enter CUDA Samples Location</span><br><span class="line"></span><br><span class="line"> [ default is /home/kinny ]:</span><br><span class="line"></span><br><span class="line">Installing the CUDA Toolkit in /usr/local/cuda-8.0 ...</span><br><span class="line"></span><br><span class="line">Missing recommended library: libXmu.so</span><br><span class="line"></span><br><span class="line">Installing the CUDA Samples in /home/kinny ...</span><br><span class="line"></span><br><span class="line">Copying samples to /home/kinny/NVIDIA_CUDA-8.0_Samples now...</span><br><span class="line"></span><br><span class="line">Finished copying samples.</span><br><span class="line"></span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">= Summary =</span><br><span class="line"></span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">Driver:   Not Selected</span><br><span class="line"></span><br><span class="line">Toolkit:  Installed in /usr/local/cuda-8.0</span><br><span class="line"></span><br><span class="line">Samples:  Installed in /home/kinny, but missing recommended libraries</span><br><span class="line"></span><br><span class="line">Please make sure that</span><br><span class="line"></span><br><span class="line"> -   PATH includes /usr/local/cuda-8.0/bin</span><br><span class="line"></span><br><span class="line"> -   LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class="line"></span><br><span class="line">To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-8.0/bin</span><br><span class="line"></span><br><span class="line">Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-8.0/doc/pdf for detailed information on setting up CUDA.</span><br><span class="line"></span><br><span class="line">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work.</span><br><span class="line"></span><br><span class="line">To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this run file:</span><br><span class="line"></span><br><span class="line">    sudo &lt;CudaInstaller&gt;.run -silent -driver</span><br><span class="line"></span><br><span class="line">Logfile is /tmp/cuda_install_17494.log</span><br></pre></td></tr></table></figure><h1 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a><strong>配置变量</strong></h1><p>进入.bashrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加下面的变量进去</p><p>注意：变量里面cuda-xx按照实际安装的版本填</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda-8.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br><span class="line"></span><br><span class="line">export CUDA_HOME=/usr/local/cuda</span><br></pre></td></tr></table></figure><p>然后使之生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入下列命令查看结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> tensorflow安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装tensorflow_gpu-1.9之一nvidia</title>
      <link href="/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%B8%80nvidia/"/>
      <url>/2018/11/23/ubuntu%E5%AE%89%E8%A3%85tensorflow-gpu-1-9%E4%B9%8B%E4%B8%80nvidia/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何在ubuntu上安装nvidia驱动的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>上一篇文章说过了如何使用.run文件去安装nvidia驱动，但是我最后不知道是版本还是别的原因，tensorflow失败了，重装系统之后我选了使用apt-get的方式，这里记录一下。</p><h1 id="禁用ubuntu自带的驱动"><a href="#禁用ubuntu自带的驱动" class="headerlink" title="禁用ubuntu自带的驱动"></a><strong>禁用ubuntu自带的驱动</strong></h1><p>打开下列配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure><p>添加如下内容并保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau               </span><br><span class="line"></span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>输入下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启系统，输入下列命令去确认nouveau已经被关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>如果终端里面没有任何别的输出，则已经确认关闭。</p><h1 id="更新pip源"><a href="#更新pip源" class="headerlink" title="更新pip源"></a><strong>更新pip源</strong></h1><p>依次输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 添加pip源</span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa </span><br><span class="line"># 使添加生效</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h1 id="选择适合的驱动"><a href="#选择适合的驱动" class="headerlink" title="选择适合的驱动"></a><strong>选择适合的驱动</strong></h1><p>以下命令查看所有能下载的驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache search nvidia</span><br></pre></td></tr></table></figure><p>下列命令查看系统推荐的驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>找到里面recommend的那一个，记住序列比如我的是415</p><p>输入如下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nvidia-415 nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure><p>注意：有点安装里面说明需要初入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>关闭lightdm服务，退出图形界面，</p><p>我这里没有退出也行，不过在安装的最后跳出设立密码，然后重启时输入密码生效，重启时，不要选continue to boot ，选择change secure state，然后输入密码生效</p><p>输入以下命令测试nvidia是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>如果成功，会显示显卡的一些信息</p><h1 id="循环登录的问题"><a href="#循环登录的问题" class="headerlink" title="循环登录的问题"></a><strong>循环登录的问题</strong></h1><p>如果安装之后出现了循环登录的问题</p><p>我的具体做法是</p><p>在系统选择界面按e，将安装系统时临时添加的nomodeset去掉，并重新使他生效</p><p>进入后，将这个改变保存下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure><p>将splash后面的modeset删掉，保存退出</p><p>再使之生效即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> tensorflow安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvidia </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux环境配置之sublime插件安装</title>
      <link href="/2018/11/22/linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B9%8Bsublime%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2018/11/22/linux%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B9%8Bsublime%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍在ubuntu系统里面安装sublime插件的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="安装sublime-text3"><a href="#安装sublime-text3" class="headerlink" title="安装sublime text3"></a><strong>安装sublime text3</strong></h1><p>目前最简单的方法是通过ppa安装，打开终端，输入以下命令：</p><p>sudo add-apt-repository ppa:webupd8team/sublime-text-3</p><p>sudo apt-get update</p><p>sudo apt-get install sublime-text-installer</p><h1 id="卸载-sublime"><a href="#卸载-sublime" class="headerlink" title="卸载 sublime"></a><strong>卸载 sublime</strong></h1><p>sudo apt-get remove sublime-text-installer</p><h1 id="启动sublime"><a href="#启动sublime" class="headerlink" title="启动sublime"></a><strong>启动sublime</strong></h1><p>命令行输入：subl(不是1是L) </p><p>可以启动sublime</p><h1 id="激活sublime"><a href="#激活sublime" class="headerlink" title="激活sublime"></a><strong>激活sublime</strong></h1><p>装完了以后可以激活它，在Help里输入license key</p><p>—– BEGIN LICENSE —–</p><p>Michael Barnes</p><p>Single User License</p><p>EA7E-821385</p><p>8A353C41 872A0D5C DF9B2950 AFF6F667</p><p>C458EA6D 8EA3C286 98D1D650 131A97AB</p><p>AA919AEC EF20E143 B361B1E7 4C8B7F04</p><p>B085E65E 2F5F5360 8489D422 FB8FC1AA</p><p>93F6323C FD7F7544 3F39C318 D95E6480</p><p>FCCC7561 8A4A1741 68FA4223 ADCEDE07</p><p>200C25BE DBBC4855 C4CFB774 C5EC138C</p><p>0FEC1CEF D9DCECEC D3A5DAD1 01316C36</p><p>—— END LICENSE ——</p><p>Key来自 <a href="https://fatesinger.com/77763" target="_blank" rel="noopener">https://fatesinger.com/77763</a></p><h1 id="安装package-control"><a href="#安装package-control" class="headerlink" title="安装package control"></a><strong>安装package control</strong></h1><p>为了使用众多的 <a href="https://sublime.wbond.net/" target="_blank" rel="noopener">插件</a> 来扩展 Sublime 的功能，你需要安装一个叫做 <strong>Package Control</strong> 的插件管理器——这个东西你必须要手动安装。但是一旦你安装好了以后，你就可以使用 Package Control 来安装，移除或者升级所有的 ST3 插件了 </p><p><img src="/2018/11/22/linux环境配置之sublime插件安装/sublime控制台.png" alt="sublime控制台"></p><p>打开sublime的控制台，输入安装的命令</p><p><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">https://packagecontrol.io/installation</a></p><p>安装命令可以从上述链接里获得。</p><h1 id="使用package-control安装插件"><a href="#使用package-control安装插件" class="headerlink" title="使用package control安装插件"></a><strong>使用package control安装插件</strong></h1><p>在preference&gt;&gt;package control里打开插件窗口，输入或找到 install package这一个选项，选中然后就可以选择需要的插件安装。</p><p><img src="/2018/11/22/linux环境配置之sublime插件安装/pxinsatll.png" alt="pxinsatll"></p><h1 id="安装anaconda插件"><a href="#安装anaconda插件" class="headerlink" title="安装anaconda插件"></a><strong>安装anaconda插件</strong></h1><p>选中install package</p><p>输入anaconda，选择对应的安装</p><p><strong>注意：</strong>如果出现安装失败，Package Control:Unableto download Emmet.Please view the console for more details </p><p>我的问题解决是：</p><p>将downloader_precedence 参数改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;windows&quot;: [&quot;wininet&quot;],</span><br><span class="line">    &quot;osx&quot;: [&quot;urllib&quot;],</span><br><span class="line">    &quot;linux&quot;: [&quot;curl&quot;, &quot;wget&quot;, &quot;urllib&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是将”curl”, “wget”往前移，这能解决这个问题</p></the>]]></content>
      
      
      <categories>
          
          <category> itools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下Nvidia驱动安装</title>
      <link href="/2018/11/21/linux%E4%B8%8BNvidia%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/"/>
      <url>/2018/11/21/linux%E4%B8%8BNvidia%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何在linux下安装Nvidia驱动的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="查看版本驱动"><a href="#查看版本驱动" class="headerlink" title="查看版本驱动"></a><strong>查看版本驱动</strong></h1><p>点击查看驱动：<a href="http://www.nvidia.com/Download/index.aspx?lang=en-us" target="_blank" rel="noopener"><strong>NVIDIA驱动</strong></a> </p><p><img src="/2018/11/21/linux下Nvidia驱动安装/驱动选择1.png" alt="驱动选择1"></p><p><img src="/2018/11/21/linux下Nvidia驱动安装/驱动选择2.png" alt="驱动选择2"></p><p>一般会下载到downloads文件夹下</p><p><strong>下载完成之后：</strong></p><p><strong>卸载原先的所有驱动：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge nvidia* </span><br><span class="line"></span><br><span class="line">sudo nvidia-uninstall</span><br></pre></td></tr></table></figure><p>关闭nouveau</p><p>这个服务是开源的驱动，会和nvidia的驱动冲突，需要提前关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在最后一行添加： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure><p>保存退出，之后，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>电脑重启之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau  #没有输出，即说明安装成功</span><br></pre></td></tr></table></figure><p>然后关闭图形界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br><span class="line"></span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-410.78.run -no-x-check -no-nouveau-check -no-opengl-files</span><br></pre></td></tr></table></figure><p>这里的-no-opengl-files参数一定要带上，不然进入之后会反复登录，黑屏或者屏幕显示异常，如果出现上述情况，删掉驱动重装。</p><h1 id="安装过程中的密钥选项"><a href="#安装过程中的密钥选项" class="headerlink" title="安装过程中的密钥选项"></a>安装过程中的密钥选项</h1><p>关于密钥的那个需要着重提示一下 参考链接：<a href="https://www.cnblogs.com/marky/p/8243607.html" target="_blank" rel="noopener">驱动安装</a></p><p>安装提示 “sign  the kernel module”  </p><p>安装过程中提示是否sign the kernel module（为内核模块签名），这里要选择是。接下来会继续问使用已有的密钥给模块签名还是重新生成。</p><p>这里选在重新生成密钥。继续下去之后，密钥会在/usr/share/nvidia/下生成一个nvidia*.der（公钥）文件和nvidia*.key（私钥）文件，当提示是否删除已生成的密钥文件时，选择否，</p><p>因为之后要用到这两个文件。继续安装程序到最后会提示无法启动模块。这是因为生成的密钥还没有添加到内核的信任库中</p><p>待安装结束后，添加密钥到内核的信任列表中 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mokutil --import /usr/share/nvidia/nvida*.der</span><br></pre></td></tr></table></figure><p>接下来提示输入密码，再次输入密码，这里的密码下面要用</p><p>然后  sudo  reboot</p><p>重启进入boot loader之后，由于进行了添加密钥操作，会触发shim，这时不能直接进入 boot,选择第二个 “ reroll the mok ” 会要求输入上一步输入的密码来导入密钥。按步骤操作， 如果不小心进入boot,<br>再次执行 sudo mokutil …</p><p>安装完成后，可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>查看驱动安装情况</p><p><img src="/2018/11/21/linux下Nvidia驱动安装/驱动安装后3.png" alt="驱动安装后3"></p></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nvidia </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux与windows双系统安装</title>
      <link href="/2018/11/21/linux%E4%B8%8Ewindows%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
      <url>/2018/11/21/linux%E4%B8%8Ewindows%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用安装linux与windows双系统<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>参考链接： <a href="https://www.bilibili.com/video/av22847796/?p=5" target="_blank" rel="noopener">双系统安装</a></p><h1 id="保留硬盘分区用以安装linux"><a href="#保留硬盘分区用以安装linux" class="headerlink" title="保留硬盘分区用以安装linux"></a>保留硬盘分区用以安装linux</h1><p>右键我的电脑，选择“管理”</p><p><img src="/2018/11/21/linux与windows双系统安装/分区开辟1.png" alt="分区开辟1"></p><p>然后进入之后点击磁盘管理，在里面选择一部分空间作为空白卷，用来安装linux系统</p><p><img src="/2018/11/21/linux与windows双系统安装/分区开辟2.png" alt="分区开辟2"></p><p>我的是一个已经安装好的150g的分区，正常删除的情况下显示的是未分配</p><p>这个150G分区就是我的linux系统安装的地方</p><h1 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h1><p>去linux官网下载合适版本的linux系统，我下载的是16.04版本的系统</p><p>链接：<a href="https://pan.baidu.com/s/1fcbjT93pGFRNOp7WFy004A" target="_blank" rel="noopener">https://pan.baidu.com/s/1fcbjT93pGFRNOp7WFy004A</a><br>提取码：bmnb<br>然后我们需要一个空U盘作为启动盘，注意保存好u盘里面的资料</p><p>使用软件usbwriter进行制作</p><p>链接：<a href="https://pan.baidu.com/s/1dLlruwtTYSnzFQn9F9I8Xg" target="_blank" rel="noopener">https://pan.baidu.com/s/1dLlruwtTYSnzFQn9F9I8Xg</a><br>提取码：7hyk<br><img src="/2018/11/21/linux与windows双系统安装/启动盘制作3.png" alt="启动盘制作3"></p><p>第一个选项框选择ubuntu的镜像文件</p><p>第二个选择你要用作启动盘的u盘</p><p>点击write，等待几分钟可制作完成</p><h1 id="进入bios安装系统"><a href="#进入bios安装系统" class="headerlink" title="进入bios安装系统"></a>进入bios安装系统</h1><p>插入制作好的启动盘，重启电脑，并进入bios界面，我的是hp电脑，hp电脑进入的具体做法是，一直按f10，然后找到启动顺序，将usb/u盘启动放到操作系统管理员前面，然后按f10保存退出，然后正常启动，就可以进入安装界面</p><p>注意：如果你是双显卡的设备，在选择的时候需要先点击e键，进入编辑界面</p><p>参考链接 ： <a href="https://blog.csdn.net/mmz_xiaokong/article/details/79416156" target="_blank" rel="noopener">安装卡死解决</a></p><p><img src="/2018/11/21/linux与windows双系统安装/防止卡死5.jpg" alt="防止卡死5"></p><p><img src="/2018/11/21/linux与windows双系统安装/防止卡死4.jpg" alt="防止卡死4"></p><p>在quiet splash 后面加（先打空格）nomodeset，然后按F10保存启动即可！！！  </p><p>由于那个是临时改动，所以还需要一步，安装好，进入之后打开终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/grub 或 sudo gedit /etc/default/grub</span><br><span class="line"># 编辑打开的文件，找到GRUB_CMDLINE_LINUX_DEFAULT那一行，在后面加上(在quiet splash后打一个空格) nomodeset（保险起见，nomodeset后面加多一个空格），保存，</span><br><span class="line"></span><br><span class="line">#然后在终端输入 </span><br><span class="line">sudo update-grub </span><br><span class="line"></span><br><span class="line">#之后重启即可</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="安装时的几个选项"><a href="#安装时的几个选项" class="headerlink" title="安装时的几个选项"></a>安装时的几个选项</h1><p>语言选择中文</p><p><img src="/2018/11/21/linux与windows双系统安装/安装选项8.jpg" alt="安装选项8"></p><p>安装类型选择其他选项</p><p><img src="/2018/11/21/linux与windows双系统安装/安装选项6.jpg" alt="安装选项6"></p><p>下面要选择我们之前切割出来的分区，分区状态时空闲，不要选择你使用过的分区，挂载点选择   /</p><p><img src="/2018/11/21/linux与windows双系统安装/安装选项7.jpg" alt="安装选项7"></p><p>点击继续</p><p><img src="/2018/11/21/linux与windows双系统安装/安装选项9.jpg" alt="安装选项9"></p><p>设置好用户名和密码</p><p><img src="/2018/11/21/linux与windows双系统安装/安装选项10.jpg" alt="安装选项10"></p><p>等待安装完成即可</p></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python的os.path用法</title>
      <link href="/2018/11/21/python%E7%9A%84os-path%E7%94%A8%E6%B3%95/"/>
      <url>/2018/11/21/python%E7%9A%84os-path%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何python里面的os模块的路径获取方法的文章<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="file"><a href="#file" class="headerlink" title="__file__"></a><strong>__file__</strong></h1><p>__file__本身是一个str，会给出当前项目文件的绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(__file__)</span><br><span class="line">print(type(__file__))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\machinelearning\自然语言处理\项目\word2vec\法院实际文书处理\解析法院xml.py</span><br><span class="line"></span><br><span class="line">E:/machinelearning/自然语言处理/项目/word2vec/法院实际文书处理/解析法院xml.py</span><br><span class="line"></span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure><p>os.path.abspath()会给出你的系统默认的文件路径方式</p><p>__file__给出的是python内部默认的文件路径方式</p><p>上述两个说法是我猜的</p><h1 id="os-path-abspath"><a href="#os-path-abspath" class="headerlink" title="os.path.abspath()"></a><strong>os.path.abspath()</strong></h1><p><strong>os.path.abspath(“test.xml”)该函数会获得当前文件夹下test.xml文件的规范化绝对路径</strong></p><p>以下是一些例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">os.path.abspath(&apos;test.csv&apos;) </span><br><span class="line"></span><br><span class="line"> &apos;C:\\Python25\\test.csv&apos;    </span><br><span class="line"></span><br><span class="line">os.path.abspath(&apos;c:\\test.csv&apos;) </span><br><span class="line"></span><br><span class="line"> &apos;c:\\test.csv&apos;    </span><br><span class="line"></span><br><span class="line">os.path.abspath(&apos;../csv\\test.csv&apos;) </span><br><span class="line"></span><br><span class="line"> &apos;C:\\csv\\test.csv&apos;</span><br></pre></td></tr></table></figure><p>特殊：<code>os.path.abspath(&quot;.&quot;)</code>会获取当前文件夹的路径</p><p><code>os.path.abspath(&quot;__file__&quot;)</code>会获取项目文件的绝对路径</p><h1 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a><strong>os.path.join()</strong></h1><p>os.path.join()函数中可以传入多个路径：</p><ul><li>会从第一个以”/”开头的参数开始拼接，之前的参数全部丢弃。</li><li>以上一种情况为先。在上一种情况确保情况下，若出现”./”开头的参数，会从”./”开头的参数的上一个参数开始拼接。</li></ul><p>以下是一些案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">print(&quot;1:&quot;,os.path.join(&apos;aaaa&apos;,&apos;/bbbb&apos;,&apos;ccccc.txt&apos;))</span><br><span class="line"></span><br><span class="line">print(&quot;2:&quot;,os.path.join(&apos;/aaaa&apos;,&apos;/bbbb&apos;,&apos;/ccccc.txt&apos;))</span><br><span class="line"></span><br><span class="line">print(&quot;3:&quot;,os.path.join(&apos;aaaa&apos;,&apos;./bbb&apos;,&apos;ccccc.txt&apos;))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: /bbbb\ccccc.txt</span><br><span class="line">2: /ccccc.txt</span><br><span class="line">3: aaaa\./bbb\ccccc.txt</span><br></pre></td></tr></table></figure><p><strong>这里就是需要找到一个路径，所以前面的路径要放弃，之后拼接的被认为是文件名。</strong></p><h1 id="os-path-dirname"><a href="#os-path-dirname" class="headerlink" title="os.path.dirname()"></a><strong>os.path.dirname()</strong></h1><p>os.path.dirname(filepath)会给出文件的当前文件夹的路径</p><p><strong>注意：传入的是文件路径</strong></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(os.path.dirname(__file__))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:/machinelearning/自然语言处理/项目/word2vec/法院实际文书处理</span><br></pre></td></tr></table></figure><h1 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir()"></a><strong>os.listdir()</strong></h1><p>os.listdir(dirpath)会给出dirpath文件夹下的所有文件文件名，<strong>但不是路径名</strong></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filedir = os.path.join(os.path.abspath(&quot;.&quot;), &quot;法院文书&quot;)</span><br><span class="line"></span><br><span class="line">lists = os.listdir(filedir)</span><br><span class="line"></span><br><span class="line">for file in lists:</span><br><span class="line">    print(&quot;====&quot;, file)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==== ﹙2014﹚腊民一初字第139号.xml</span><br><span class="line">==== （2011）会民一初字第522号.xml</span><br><span class="line">==== （2011）吉民初字第355号.xml</span><br><span class="line">==== （2011）江法民初字第0622606057号.xml</span><br><span class="line">==== （2011）江法民初字第06226号.xml</span><br><span class="line">==== （2011）湖吴民初字第1078号.xml</span><br><span class="line">==== （2011）红民初字第690号.xml</span><br><span class="line">==== （2011）解民初字第1575号.xml</span><br><span class="line">==== （2011）辉民初字第710-1号.xml</span><br><span class="line">==== （2011）金东民初字第792号.xml</span><br><span class="line">==== （2011）金民二初字第5486号.xml</span><br><span class="line">==== （2011）金民初字第01366号.xml</span><br></pre></td></tr></table></figure><h1 id="os-path-split"><a href="#os-path-split" class="headerlink" title="os.path.split()"></a><strong>os.path.split()</strong></h1><p>os.path.split(filepath)会将传入的文件路径名分成两部分，文件当前文件夹的路径名以及文件名，也就是dirname和basename</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temppath = os.path.abspath(__file__)</span><br><span class="line">print(temppath)</span><br><span class="line">twoele = os.path.split(temppath)</span><br><span class="line">print(twoele[0])</span><br><span class="line">print(twoele[1])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\machinelearning\自然语言处理\项目\word2vec\法院实际文书处理\解析法院xml.py</span><br><span class="line">E:\machinelearning\自然语言处理\项目\word2vec\法院实际文书处理</span><br><span class="line">解析法院xml.py</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python本身 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python的xml解析</title>
      <link href="/2018/11/20/python%E7%9A%84xml%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/11/20/python%E7%9A%84xml%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用python里面的dom去解析xml<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import xml.dom.minidom as xmldom</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created by gaoyw on 2018/11/20</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">XML文件读取</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;catalog&gt;</span><br><span class="line">    &lt;maxid&gt;4&lt;/maxid&gt;</span><br><span class="line">    &lt;login username=&quot;pytest&quot; passwd=&apos;123456&apos;&gt;dasdas</span><br><span class="line">        &lt;caption&gt;Python&lt;/caption&gt;</span><br><span class="line">        &lt;item id=&quot;4&quot;&gt;</span><br><span class="line">            &lt;caption&gt;测试&lt;/caption&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/login&gt;</span><br><span class="line">    &lt;item id=&quot;2&quot;&gt;</span><br><span class="line">        &lt;caption&gt;Zope&lt;/caption&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">&lt;/catalog&gt;</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">xmlfilepath = os.path.abspath(&quot;test.xml&quot;) </span><br><span class="line"># 上述xml文件命名为test.xml放入执行文件的同一目录下</span><br><span class="line">print (&quot;xml文件路径：&quot;, xmlfilepath)</span><br><span class="line"></span><br><span class="line"># 得到文档对象</span><br><span class="line">domobj = xmldom.parse(xmlfilepath)</span><br><span class="line">print(&quot;xmldom.parse获得的对象是:&quot;, type(domobj))</span><br><span class="line"># 得到元素对象</span><br><span class="line">elementobj = domobj.documentElement</span><br><span class="line">print (&quot;domobj.documentElement获得的对象是:&quot;, type(elementobj))</span><br><span class="line"></span><br><span class="line">#获得子标签</span><br><span class="line">subElementObj = elementobj.getElementsByTagName(&quot;login&quot;)</span><br><span class="line">print (&quot;getElementsByTagName获得的对象是:&quot;, type(subElementObj))</span><br><span class="line"></span><br><span class="line">print (&quot;login标签的数目是：&quot;,len(subElementObj))</span><br><span class="line"># 获得标签属性值</span><br><span class="line">print (&quot;login标签中第一个标签的username的属性值是：&quot;+subElementObj[0].getAttribute(&quot;username&quot;))</span><br><span class="line">print (&quot;login标签中第一个标签的passwd的属性值是：&quot;+subElementObj[0].getAttribute(&quot;passwd&quot;))</span><br><span class="line"></span><br><span class="line">#区分相同标签名的标签</span><br><span class="line">subElementObj1 = elementobj.getElementsByTagName(&quot;caption&quot;)</span><br><span class="line">print(&quot;caption标签共有%s个&quot; % len(subElementObj1))</span><br><span class="line">for i in range(len(subElementObj1)):</span><br><span class="line">    print (&quot;subElementObj1[i]:&quot;, type(subElementObj1[i]))</span><br><span class="line">    print (subElementObj1[i].firstChild.data)  #显示标签对之间的数据</span><br></pre></td></tr></table></figure><p><strong>上述的输出结果是：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xml文件路径： E:\machinelearning\自然语言处理\项目\word2vec\xml解析\test.xml</span><br><span class="line">xmldom.parse获得的对象是: &lt;class &apos;xml.dom.minidom.Document&apos;&gt;</span><br><span class="line">domobj.documentElement获得的对象是: &lt;class &apos;xml.dom.minidom.Element&apos;&gt;</span><br><span class="line">getElementsByTagName获得的对象是: &lt;class &apos;xml.dom.minicompat.NodeList&apos;&gt;</span><br><span class="line">login标签的数目是： 1</span><br><span class="line">login标签中第一个标签的username的属性值是：pytest</span><br><span class="line">login标签中第一个标签的passwd的属性值是：123456</span><br><span class="line">caption标签共有3个</span><br><span class="line">subElementObj1[i]: &lt;class &apos;xml.dom.minidom.Element&apos;&gt;</span><br><span class="line">Python</span><br><span class="line">subElementObj1[i]: &lt;class &apos;xml.dom.minidom.Element&apos;&gt;</span><br><span class="line">测试</span><br><span class="line">subElementObj1[i]: &lt;class &apos;xml.dom.minidom.Element&apos;&gt;</span><br><span class="line">Zope</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VPS与ssr搭建</title>
      <link href="/2018/11/20/VPS%E4%B8%8Essr%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/11/20/VPS%E4%B8%8Essr%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：[转载]这是一篇介绍如何利用远程虚拟主机去搭建ssr获得访问外网的能力<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="本文的来源"><a href="#本文的来源" class="headerlink" title="本文的来源"></a>本文的来源</h1><p><a href="https://www.baishitou.cn/1524.html" target="_blank" rel="noopener">用VPS搭建SSR服务器教程</a></p><p>点击上面链接可以查看原文</p><h1 id="第一步：购买VPS服务器"><a href="#第一步：购买VPS服务器" class="headerlink" title="第一步：购买VPS服务器"></a><strong>第一步：购买VPS服务器</strong></h1><p>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高，按小时计费，能够随时开通和删除服务器，新服务器即是新ip </p><p>注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal（首选）或支付宝 </p><p>建议选择最便宜的ipv4的服务器，我选了3.5$/month的那类，每月有500G流量。</p><p><strong>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后速度不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，方便且实用。因为新的服务器就是新的ip，所以当ip被封时这个方法很有用。当ip被封时，为了保证新开的服务器ip和原先的ip不一样，先开新服务器，开好后再删除旧服务器即可。</strong> </p><p>服务器搭建：</p><p><img src="/2018/11/20/VPS与ssr搭建/pac教程01.png" alt="pac教程01"></p><p><img src="/2018/11/20/VPS与ssr搭建/pac教程02.png" alt="pac教程02"></p><p><img src="/2018/11/20/VPS与ssr搭建/pac教程04.png" alt="pac教程04"></p><p><strong>选择vps操作系统时，不要选centos7系统！点击图中的CentOS几个字，会弹出centos6，然后选中centos6！entos7默认的防火墙可能会干扰ssr的正常连接！</strong></p><p><strong>完成购买后，找到系统的密码记下来，部署服务器时需要用到。vps系统（推荐centos6）的密码获取方法如下图</strong> </p><p><img src="/2018/11/20/VPS与ssr搭建/pac教程05.png" alt="pac教程05"></p><p><img src="/2018/11/20/VPS与ssr搭建/pac教程06.png" alt="pac教程06"></p><p><strong>删掉服务器步骤如下图</strong>： </p><p><img src="/2018/11/20/VPS与ssr搭建/de2.PNG" alt="de2"></p><p><img src="/2018/11/20/VPS与ssr搭建/de5.png" alt="de5"></p><h1 id="第二步：部署VPS服务器"><a href="#第二步：部署VPS服务器" class="headerlink" title="第二步：部署VPS服务器"></a><strong>第二步：部署VPS服务器</strong></h1><p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。建议下载一个免费版本的xshell就行了</p><p>链接：<a href="https://pan.baidu.com/s/1Q2qq6xQH9pEnPJjXMPLwlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Q2qq6xQH9pEnPJjXMPLwlA</a><br>提取码：3vb1 </p><p>如果你是苹果电脑操作系统，更简单，无需下载xshell，系统可以直接连接VPS。打开<strong>终端</strong>（Terminal），输入ssh root@ip 其中“ip”替换成你VPS的ip, 按回车键，然后复制粘贴密码，按回车键即可登录。粘贴密码时有可能不显示密码，但不影响， <a href="http://www.cnblogs.com/ghj1976/archive/2013/04/19/3030159.html" target="_blank" rel="noopener">参考设置方法</a> 如果不能用MAC自带的终端连接的话，直接网上搜“MAC连接SSH的软件”，有很多，然后通过软件来连接vps服务器就行，具体操作方式参考windows xshell。 </p><p><strong>部署教程：</strong> </p><p>下载xshell软件并安装后，打开软件 </p><p><img src="/2018/11/20/VPS与ssr搭建/xshell11.png" alt="xshell11"></p><p>选择文件，新建 </p><p><img src="/2018/11/20/VPS与ssr搭建/xshell12.png" alt="xshell12"></p><p>随便取个名字，然后把你的服务器ip填上 </p><p><img src="/2018/11/20/VPS与ssr搭建/xshell13.png" alt="xshell13"></p><p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名默认都是root，密码是你购买的服务器系统的密码。</p><p><strong>如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被封的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。</strong></p><p><img src="/2018/11/20/VPS与ssr搭建/xshell14.png" alt="xshell14"></p><p><img src="/2018/11/20/VPS与ssr搭建/xshell2.png" alt="xshell2"></p><p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。 </p><p>将以下代码依次粘贴到shell打开的远程链接窗口里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N –no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>复制上面的代码到VPS服务器里，按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure><p><img src="/2018/11/20/VPS与ssr搭建/8.png" alt="8"></p><p>如上图出现管理界面后，<strong>输入数字1来安装SSR服务端</strong>。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。 </p><p><img src="/2018/11/20/VPS与ssr搭建/31.png" alt="31"></p><p>根据上图提示，依次输入自己想设置的<strong>端口和密码</strong> (<strong>密码建议用复杂点的字母组合，端口号为40-65535之间的数字</strong>)，回车键用于确认</p><p>注：关于端口的设置，总的网络总端口有6万多个，理论上可以任意设置。但是有的地区需要设置特殊的端口才有效，一些特殊的端口比如80、143、443、1433、3306、3389、8080。</p><p><img src="/2018/11/20/VPS与ssr搭建/32.png" alt="32"></p><p>如上图，选择想设置的<strong>加密方式</strong>，比如10，按回车键确认</p><p>接下来是选择<strong>协议插件</strong>，如下图：</p><p><img src="/2018/11/20/VPS与ssr搭建/11.png" alt="11"></p><p><img src="/2018/11/20/VPS与ssr搭建/41.PNG" alt="41"></p><p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y</p><p>之后进行混淆插件的设置。</p><p><strong>注意：如果协议是origin，那么混淆也必须是plain；如果协议不是origin，那么混淆可以是任意的。有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（特别注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</strong></p><p><img src="/2018/11/20/VPS与ssr搭建/33.png" alt="33"></p><p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p>注意：关于限制设备数，这个协议必须是非原版且不兼容原版才有效，也就是必须使用SSR协议的情况下，才有效！</p><p><img src="/2018/11/20/VPS与ssr搭建/14.png" alt="14"></p><p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y </p><p><img src="/2018/11/20/VPS与ssr搭建/15.png" alt="15"></p><p>耐心等待一会，出现下面的界面即部署完成： </p><p><img src="/2018/11/20/VPS与ssr搭建/16.png" alt="16"></p><p><img src="/2018/11/20/VPS与ssr搭建/34.png" alt="34"></p><p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如： </p><p><img src="/2018/11/20/VPS与ssr搭建/22.png" alt="22"></p><p><img src="/2018/11/20/VPS与ssr搭建/23.png" alt="23"></p><p><strong>脚本演示结束。</strong></p><p>此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署</p><h1 id="第三步：一键加速VPS服务器"><a href="#第三步：一键加速VPS服务器" class="headerlink" title="第三步：一键加速VPS服务器"></a><strong>第三步：一键加速VPS服务器</strong></h1><p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p><p>【谷歌BBR加速教程】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p><p>演示开始，如图：</p><p>复制并粘贴代码后，按回车键确认</p><p><img src="/2018/11/20/VPS与ssr搭建/18.png" alt="18"></p><p><img src="/2018/11/20/VPS与ssr搭建/20.png" alt="20"></p><p>部署到上图这个位置的时候，等待3～6分钟 </p><p><img src="/2018/11/20/VPS与ssr搭建/21.png" alt="21"></p><p>最后输入y重启服务器，如果输入y提示command not found ，接着输入reboot来重启服务器，确保加速生效，bbr加速脚本是开机自动启动，装一次就可以了。 </p><p>购买vps服务器后，ip有了，通过部署，端口、密码、加密方式、协议和混淆也有了，最后将这些信息填入SSR客户端就可以访问外网啦。</p><p><strong>有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子</strong>：</p><p><img src="/2018/11/20/VPS与ssr搭建/42.PNG" alt="42"></p><p>在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。</p><p>启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择”全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）</p><p><img src="/2018/11/20/VPS与ssr搭建/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png" alt="32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f"></p><p>以下是shadowSocketR的windows客户端下载链接：</p><p>链接：<a href="https://pan.baidu.com/s/1knC8BS7tRseMG1z3Xjx6hQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1knC8BS7tRseMG1z3Xjx6hQ</a><br>提取码：o95d </p></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> ssr </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python里的Data streaming总结</title>
      <link href="/2018/11/10/python%E9%87%8C%E7%9A%84Data-streaming%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/10/python%E9%87%8C%E7%9A%84Data-streaming%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍python里的data streaming的文章，关于generators, iterators, iterables都有涉及到<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>原文链接：<a href="https://rare-technologies.com/data-streaming-in-python-generators-iterators-iterables/" target="_blank" rel="noopener">Data streaming in Python: generators, iterators, iterables</a></p><h1 id="最重要的是节约了内存"><a href="#最重要的是节约了内存" class="headerlink" title="最重要的是节约了内存"></a>最重要的是节约了内存</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = range(100000)</span><br><span class="line"> </span><br><span class="line">sum([n**2 for n in numbers])</span><br><span class="line">333328333350000</span><br><span class="line"> </span><br><span class="line"># Generator: square and sum one value after another</span><br><span class="line"># No extra array created = lazily evaluated stream of numbers!</span><br><span class="line">sum(n**2 for n in numbers)</span><br><span class="line">333328333350000</span><br></pre></td></tr></table></figure><p>第一种方法没有使用streaming的方式，他首先创造了一个list，然后对它求和，是很浪费的。</p><p>第二种方法则是对一个元平方求和之后再处理下一个元素，没有创建一个list</p><p>这两种方法也许在时间效率上有所区别，但是在任何一个严格的数据处理过程中，语言的开销远远小于数据生成和计算的开销，迭代序列的真正力量在于<strong>节约内存</strong>！</p><h1 id="Generators-iterators-iterables的区别"><a href="#Generators-iterators-iterables的区别" class="headerlink" title="Generators, iterators, iterables的区别"></a>Generators, iterators, iterables的区别</h1><p>iterator是我们最终关心的，它是实际管理一个序列里的单个元素的对象。而iterables和generators则是可以提供一个iterator的机制。这两者也是也是有区别的。</p><p>generator只能提供一次iterator，也就是你遍历一遍generator，那数据就已经消耗完了，在运行它也不会有更多的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">generator = (word + &apos;!&apos; for word in &apos;baby let me iterate ya&apos;.split())</span><br><span class="line"># 一个generator对象创建好了，等待被迭代</span><br><span class="line"># 在这个点，惊叹号还没有添加进去</span><br><span class="line"> </span><br><span class="line">for val in generator: # 在迭代过程中，真正的处理过程在这里，这时候惊叹号才产生</span><br><span class="line">    print val,</span><br><span class="line"># baby! let! me! iterate! ya!</span><br><span class="line"> </span><br><span class="line">for val in generator:</span><br><span class="line">    print val,</span><br><span class="line"># 什么都不会打印出来，没有数据了，generator数据流之前已经消耗完了</span><br></pre></td></tr></table></figure><p>iterable则不一样，只要当每次循环完成，就可以产生一个新的iterator（具体的说，是<em>iterable._ iter_ ()</em>被调用，例如python里面每次调用for循环）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class BeyonceIterable(object):</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        The iterable interface: return an iterator from __iter__().</span><br><span class="line">        Every generator is an iterator implicitly (but not vice versa!),</span><br><span class="line">        so implementing `__iter__` as a generator is the easiest way to create streamed iterables.</span><br><span class="line">        iterable的接口，会通过__iter__()返回一个iterator</span><br><span class="line">        每个generator都可以看做一个隐含的iterator，所以实现一个generator是创建一个可迭代对象的最简单的方式</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for word in &apos;baby let me iterate ya&apos;.split():</span><br><span class="line">            yield word + &apos;!&apos;  # 这里使用的是yield去创建generator，和之前的本质是一样的。uses yield =&gt; __iter__ is a generator</span><br><span class="line"> </span><br><span class="line">iterable = BeyonceIterable()</span><br><span class="line"> </span><br><span class="line">for val in iterable:  # 创造了一个iterator</span><br><span class="line">    print val,</span><br><span class="line"># baby! let! me! iterate! ya!</span><br><span class="line"> </span><br><span class="line">for val in iterable:  # 创造了另一个iterator</span><br><span class="line">    print val,</span><br><span class="line"># baby! let! me! iterate! ya!</span><br></pre></td></tr></table></figure><p>一般而言，iterables是一个更有用的机制，他可以允许你多次读取某一个序列。当然，如果你的数据只能被读取一次的话，那就只能使用generator。</p></the>]]></content>
      
      
      <categories>
          
          <category> python技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data streaming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jieba之分词</title>
      <link href="/2018/11/09/%E5%88%86%E8%AF%8D/"/>
      <url>/2018/11/09/%E5%88%86%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用jieba去分词的博客<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br></pre></td></tr></table></figure><h1 id="建立短句"><a href="#建立短句" class="headerlink" title="建立短句"></a>建立短句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = u&apos;我想和女朋友一起去北京故宫博物院参观和闲逛。&apos;</span><br></pre></td></tr></table></figure><p>这里的u是告诉python是使用Unicode编码解读里面的数据，一般在文件开头加上# -<em>- coding: UTF-8 -</em>-也可以做到</p><h1 id="精确模式"><a href="#精确模式" class="headerlink" title="精确模式"></a>精确模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cut = jieba.cut(s)</span><br><span class="line">print(&quot;【精确模式下输出】&quot;)</span><br><span class="line">print(cut) </span><br><span class="line"># &lt;generator object Tokenizer.cut at 0x0000023490DA3888&gt;</span><br><span class="line"># 这里输出的是一个generator</span><br><span class="line">print(&apos;,&apos;.join(cut))  </span><br><span class="line"># &apos;,&apos;.join(cut)表示使用&quot;,&quot;将cut里面的序列连接起来</span><br><span class="line"># 我,想,和,女朋友,一起,去,北京故宫博物院,参观,和,闲逛,。</span><br></pre></td></tr></table></figure><h1 id="全局模式"><a href="#全局模式" class="headerlink" title="全局模式"></a>全局模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cutall=jieba.cut(s,cut_all = True)</span><br><span class="line">print(&quot;【全局模式下输出】&quot;)</span><br><span class="line">print(&apos;,&apos;.join(cutall))</span><br><span class="line"># 我,想,和,女朋友,朋友,一起,去,北京,北京故宫,北京故宫博物院,故宫,故宫博物院,博物,博物院,参观,和,闲逛,,</span><br></pre></td></tr></table></figure><p>全局模式下会尽可能多的对字符串进行切分</p><h1 id="搜索引擎模式"><a href="#搜索引擎模式" class="headerlink" title="搜索引擎模式"></a>搜索引擎模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cutsearch = jieba.cut_for_search(s)</span><br><span class="line">print(&apos;【搜索引擎模式下输出】&apos;)</span><br><span class="line">print(&apos;,&apos;.join(cutsearch))</span><br><span class="line"># 我,想,和,朋友,女朋友,一起,去,北京,故宫,博物,博物院,北京故宫博物院,参观,和,闲逛,。</span><br></pre></td></tr></table></figure><p>在精确模式的基础上，对长词在此划分</p><h1 id="使用lcut获取list"><a href="#使用lcut获取list" class="headerlink" title="使用lcut获取list"></a>使用lcut获取list</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cut_s = jieba.lcut(s)</span><br><span class="line">print(type(cut_s)) </span><br><span class="line"># &lt;class &apos;list&apos;&gt; 这里返回的是list</span><br><span class="line">print(cut_s)</span><br><span class="line"># [&apos;我&apos;, &apos;想&apos;, &apos;和&apos;, &apos;女朋友&apos;, &apos;一起&apos;, &apos;去&apos;, &apos;北京故宫博物院&apos;, &apos;参观&apos;, &apos;和&apos;, &apos;闲逛&apos;, &apos;。&apos;]</span><br><span class="line"></span><br><span class="line">lcut_for_search = jieba.lcut_for_search(s) # 这里也是lcut</span><br><span class="line">print(lcut_for_search)  # 返回list</span><br><span class="line"># [&apos;我&apos;, &apos;想&apos;, &apos;和&apos;, &apos;朋友&apos;, &apos;女朋友&apos;, &apos;一起&apos;, &apos;去&apos;, &apos;北京&apos;, &apos;故宫&apos;, &apos;博物&apos;, &apos;博物院&apos;, &apos;北京故宫博物院&apos;, &apos;参观&apos;, &apos;和&apos;, &apos;闲逛&apos;, &apos;。&apos;]</span><br></pre></td></tr></table></figure><h1 id="综合上述代码"><a href="#综合上述代码" class="headerlink" title="综合上述代码"></a>综合上述代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import numpy as np</span><br><span class="line"># import tensorflow as tf</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created by gaoyw on 2018/11/9</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import jieba</span><br><span class="line">s = &apos;我想和女朋友一起去北京故宫博物院参观和闲逛。&apos;</span><br><span class="line">cut = jieba.cut(s)</span><br><span class="line"></span><br><span class="line">print(&apos;【精确模式下输出】&apos;)</span><br><span class="line">print(cut)</span><br><span class="line">print(&apos;,&apos;.join(cut))</span><br><span class="line"></span><br><span class="line">cutall=jieba.cut(s,cut_all = True)</span><br><span class="line">print(&quot;【全局模式下输出】&quot;)</span><br><span class="line">print(&apos;,&apos;.join(cutall))</span><br><span class="line"></span><br><span class="line">cutsearch = jieba.cut_for_search(s)</span><br><span class="line">print(&apos;【搜索引擎模式下输出】&apos;)</span><br><span class="line">print(&apos;,&apos;.join(cutsearch))</span><br><span class="line"></span><br><span class="line">cut_s = jieba.lcut(s)</span><br><span class="line">print(type(cut_s))</span><br><span class="line">print(cut_s)</span><br><span class="line"></span><br><span class="line">lcut_for_search = jieba.lcut_for_search(s)</span><br><span class="line">print(lcut_for_search)</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分词 </tag>
            
            <tag> jieba </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>genism之tfidf</title>
      <link href="/2018/11/09/tfidf/"/>
      <url>/2018/11/09/tfidf/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用genism去计算一个词在文档语料库的tfidf值的博客<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from gensim import models, similarities</span><br></pre></td></tr></table></figure><h1 id="定义语料库"><a href="#定义语料库" class="headerlink" title="定义语料库"></a>定义语料库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">corpus = [[(0, 1.0), (1, 1.0), (2, 1.0)],</span><br><span class="line">            [(2, 1.0), (3, 1.0), (4, 1.0), (5, 1.0), (6, 1.0), (8, 1.0)],</span><br><span class="line">            [(1, 1.0), (3, 1.0), (4, 1.0), (7, 1.0)],</span><br><span class="line">            [(0, 1.0), (4, 2.0), (7, 1.0)],</span><br><span class="line">            [(3, 1.0), (5, 1.0), (6, 1.0)],</span><br><span class="line">            [(9, 1.0)],</span><br><span class="line">            [(9, 1.0), (10, 1.0)],</span><br><span class="line">            [(9, 1.0), (10, 1.0), (11, 1.0)],</span><br><span class="line">            [(8, 1.0), (10, 1.0), (11, 1.0)]]</span><br></pre></td></tr></table></figure><p>corpus就是我们的文档库，其中article0=corpus[0]=[(0, 1.0), (1, 1.0), (2, 1.0)]表示的是一篇文档的组成,article0[0]=（0,1.0）表示的是单词编号为0的词在该文章里有出现过1.0次，其余组成也是这样：单词编号为1的词在该文章里出现1.0次，单词编号为2的词在该文章里出现了1.0次。</p><h1 id="建立tfidf的模型"><a href="#建立tfidf的模型" class="headerlink" title="建立tfidf的模型"></a>建立tfidf的模型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tfidf = models.TfidfModel(corpus)</span><br></pre></td></tr></table></figure><h1 id="建立需要提取的文档"><a href="#建立需要提取的文档" class="headerlink" title="建立需要提取的文档"></a>建立需要提取的文档</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_article = [(0, 1), (4, 1)]</span><br></pre></td></tr></table></figure><p>显然文档也是由向量组成的。</p><h1 id="计算新文档的tfidf的值"><a href="#计算新文档的tfidf的值" class="headerlink" title="计算新文档的tfidf的值"></a>计算新文档的tfidf的值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result=tfidf[new_article]</span><br></pre></td></tr></table></figure><p>result就是这篇文章中所有词的tfidf值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>打印结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, 0.8075244024440723), (4, 0.5898341626740045)]</span><br></pre></td></tr></table></figure><p>结果表示的是编号为0的词的tfidf的值为0.8075244024440723，而编号为4的词的tfidf的值为0.5898341626740045</p><h1 id="综合上述代码"><a href="#综合上述代码" class="headerlink" title="综合上述代码"></a>综合上述代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from gensim import models, similarities</span><br><span class="line">corpus = [[(0, 1.0), (1, 1.0), (2, 1.0)],</span><br><span class="line">            [(2, 1.0), (3, 1.0), (4, 1.0), (5, 1.0), (6, 1.0), (8, 1.0)],</span><br><span class="line">            [(1, 1.0), (3, 1.0), (4, 1.0), (7, 1.0)],</span><br><span class="line">            [(0, 1.0), (4, 2.0), (7, 1.0)],</span><br><span class="line">            [(3, 1.0), (5, 1.0), (6, 1.0)],</span><br><span class="line">            [(9, 1.0)],</span><br><span class="line">            [(9, 1.0), (10, 1.0)],</span><br><span class="line">            [(9, 1.0), (10, 1.0), (11, 1.0)],</span><br><span class="line">            [(8, 1.0), (10, 1.0), (11, 1.0)]]</span><br><span class="line">print(np.shape(corpus))</span><br><span class="line">tfidf = models.TfidfModel(corpus)</span><br><span class="line">new_article = [(0, 1), (4, 1)]</span><br><span class="line">result = tfidf[new_article]</span><br><span class="line">print(result) </span><br><span class="line"># [(0, 0.8075244024440723), (4, 0.5898341626740045)]</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gensim </tag>
            
            <tag> tfidf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>word2vec工具探索</title>
      <link href="/2018/11/09/word2vec/"/>
      <url>/2018/11/09/word2vec/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这是一篇介绍如何使用genism去计算一个词的word embedding<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>这是最简单的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import gensim</span><br><span class="line"></span><br><span class="line">sentences = [[&apos;first&apos;, &apos;sentence&apos;], [&apos;second&apos;, &apos;sentence&apos;]]</span><br><span class="line"># train word2vec on the two sentences</span><br><span class="line">model = gensim.models.Word2Vec(sentences, size=5, min_count=1)</span><br><span class="line">word_vec = model[&apos;first&apos;]</span><br><span class="line">print(word_vec)</span><br><span class="line"># [ 0.03712391 -0.01817003 -0.06288775 -0.04320185 -0.05464336]</span><br></pre></td></tr></table></figure><h1 id="模型参数介绍"><a href="#模型参数介绍" class="headerlink" title="模型参数介绍"></a>模型参数介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class gensim.models.word2vec.Word2Vec(sentences=None, corpus_file=None, size=100, alpha=0.025, window=5, min_count=5, max_vocab_size=None, sample=0.001, seed=1, workers=3, min_alpha=0.0001, sg=0, hs=0, negative=5, ns_exponent=0.75, cbow_mean=1, hashfxn=&lt;built-in function hash&gt;, iter=5, null_word=0, trim_rule=None, sorted_vocab=1, batch_words=10000, compute_loss=False, callbacks=(), max_final_vocab=None)</span><br></pre></td></tr></table></figure><p>sentence：用于训练的数据，The sentences iterable can be simply a list of lists of tokens ，意思是它是list of lists，最里层的list就是句子，sentences = [[‘first’, ‘sentence’], [‘second’, ‘sentence’]]就是表示第一个句子是first sentence，第二个句子是second sentence。但是他也可以表示为<em>iterable of iterables</em> ,iterable的一些介绍可以看我的另一篇博文，简单来说就是可以多次生成iterator的对象。</p><p>corpus_file: 这是一个用来加速的选项，需要用genism里面的一个处理函数，没见人用过</p><p>size：(<em>int,</em> <em>optional</em>)  - 是指特征向量的维度，默认为100 </p><p>window：(<em>int,</em> <em>optional</em>) —表示当前词与预测词在一个句子中的最大距离是多少 </p><p>alpha: (<em>float,</em> <em>optional</em>) - 是学习速率 </p><p>min_alpha：<em>(</em>float<em>,</em> <em>optional</em>) – 学习率会线性的下降到min_alpha的值</p><p>seed：(<em>int,</em> <em>optional</em>)  - 用于随机数发生器。与初始化词向量有关。 </p><p>sg： (<em>{0</em>, <em>1},</em> <em>optional</em>) –  1 表示使用skip-gram; 其他表示使用CBOW.</p><p>hs：(<em>{0,</em> <em>1},</em> <em>optional</em>) – 如果是1, 表示使用hierarchical softmax去训练. 如果是0, 并且negative参数非零,会使用负采样训练。</p><p>negative： (<em>int,</em> <em>optional</em>) – 这里说的是负采样会加入几个噪声进去，表示负的程度，一般取5到20个词作为负采样，如果设置成0，那么就不会有负样本</p><p>cbow_mean:  (<em>{0,</em> <em>1},</em> <em>optional</em>) - 如果为0，则采用上下文词向量的和，如果为1（defau·t）则采用均值。只有使用CBOW的时候才起作用。</p><p>min_count :  (<em>int,</em> <em>optional</em>) - 词频少于min_count次数的单词会被丢弃掉, 默认值为5</p><p>max_vocab_size: (<em>int,</em> <em>optional</em>) - 设置词向量构建期间的RAM限制。如果所有独立单词个数超过这个，则就消除掉其中最不频繁的一个。每一千万个单词需要大约1GB的RAM。设置成None则没有限制。</p><p>sample:  (<em>float,</em> <em>optional</em>) - 高频词汇的随机降采样的配置阈值，默认为1e-3，范围是(0,1e-5)</p><p>workers： (<em>int,</em> <em>optional</em>)  - 参数控制训练的并行数。</p><p>hashfxn： hash函数来初始化权重。默认使用python的hash函数</p><p>iter：(<em>int,</em> <em>optional</em>)  - 迭代次数，默认为5，一般会有默认的第一次，用来构建字典树</p><p>trim_rule： (<em>function,</em> <em>optional</em>)  用于设置词汇表的整理规则，指定那些单词要留下，哪些要被删除。可以设置为None（min_count会被使用）或者一个接受()并返回RU·E_DISCARD,uti·s.RU·E_KEEP或者uti·s.RU·E_DEFAU·T的函数。</p><p>sorted_vocab： (<em>{0,</em> <em>1},</em> <em>optional</em>) – 如果为1（default），则在分配word index 的时候会先对单词基于频率降序排序。</p><p>batch_words：(<em>int,</em> <em>optional</em>) - 每一批的传递给线程的单词的数量，默认为10000</p><h1 id="使用iterable传入对象"><a href="#使用iterable传入对象" class="headerlink" title="使用iterable传入对象"></a>使用iterable传入对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class MySentences(object):</span><br><span class="line">    def __init__(self, dirname):</span><br><span class="line">        self.dirname = dirname</span><br><span class="line"> </span><br><span class="line">    def __iter__(self):</span><br><span class="line">        for fname in os.listdir(self.dirname):</span><br><span class="line">            for line in open(os.path.join(self.dirname, fname)):</span><br><span class="line">                yield line.split()</span><br><span class="line"> </span><br><span class="line">sentences = MySentences(&apos;/some/directory&apos;) # a memory-friendly iterator</span><br><span class="line">model = gensim.models.Word2Vec(sentences)</span><br></pre></td></tr></table></figure><p>这里的sentence是一个可迭代对象，每次给模型的是一个list（文件夹里面文件的某一行的单词list），然后逐步把所有语料库都传入进去，这样可以不用一次加载全部语料库，节约了内存</p><h1 id="输入流无法重复利用"><a href="#输入流无法重复利用" class="headerlink" title="输入流无法重复利用"></a>输入流无法重复利用</h1><p>有时候我们的输入流是无法重复使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model = gensim.models.Word2Vec(iter=1)  </span><br><span class="line"># 建立一个空模型 an empty model, no training yet</span><br><span class="line">model.build_vocab(some_sentences) </span><br><span class="line"># 先建立字典树 不要使用训练的数据，用别的已知的数据</span><br><span class="line"># can be a non-repeatable, 1-pass generator</span><br><span class="line">model.train(other_sentences)  </span><br><span class="line"># 使用这次训练的语料库进行训练 </span><br><span class="line"># can be a non-repeatable, 1-pass generator</span><br></pre></td></tr></table></figure><h1 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.save(&apos;/tmp/mymodel&apos;)</span><br><span class="line">new_model = gensim.models.Word2Vec.load(&apos;/tmp/mymodel&apos;)</span><br></pre></td></tr></table></figure><h1 id="载入模型并进一步训练"><a href="#载入模型并进一步训练" class="headerlink" title="载入模型并进一步训练"></a>载入模型并进一步训练</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = gensim.models.Word2Vec.load(&apos;/tmp/mymodel&apos;)</span><br><span class="line">more_sentence = [[&quot;some&quot;,&quot;more&quot;,&quot;sentences&quot;]]</span><br><span class="line">model.train(more_sentences)</span><br></pre></td></tr></table></figure><h1 id="一些模型的用处"><a href="#一些模型的用处" class="headerlink" title="一些模型的用处"></a>一些模型的用处</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model.most_similar(positive=[&apos;woman&apos;, &apos;king&apos;], negative=[&apos;man&apos;], topn=1)</span><br><span class="line">[(&apos;queen&apos;, 0.50882536)]</span><br><span class="line">model.doesnt_match(&quot;breakfast cereal dinner lunch&quot;.split())</span><br><span class="line">&apos;cereal&apos;</span><br><span class="line">model.similarity(&apos;woman&apos;, &apos;man&apos;)</span><br><span class="line">0.73723527</span><br></pre></td></tr></table></figure><p>most_similar的用法：取最接近（positive向量和 - negative向量和）的前topn个词，并给出相似度</p><p>positive (<em>list of str</em>, <em>optional</em>) – List of words that contribute positively.</p><p>negative<em>(</em>list of str<em>,</em> <em>optional</em>) – List of words that contribute negatively.</p><p>topn (<em>int,</em> <em>optional</em>) – Number of top-N similar words to return.</p><p>similarity的用法：计算两个单词的余弦相似度</p><p>doesnt_match的用法：找到list里面与其他词最不一相似的那一个</p></the>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gensim </tag>
            
            <tag> word2vec </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何建立这个站点</title>
      <link href="/2018/11/07/%E5%BB%BA%E7%AB%8B%E8%BF%99%E4%B8%AA%E7%AB%99%E7%82%B9/"/>
      <url>/2018/11/07/%E5%BB%BA%E7%AB%8B%E8%BF%99%E4%B8%AA%E7%AB%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要="">摘要：这里简单记录一下这个站点建立的过程<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="建立github-page"><a href="#建立github-page" class="headerlink" title="建立github page"></a>建立github page</h1><h2 id="申请一个github账号"><a href="#申请一个github账号" class="headerlink" title="申请一个github账号"></a>申请一个github账号</h2><p>进入 <a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">github申请界面</a></p><p><img src="/2018/11/07/建立这个站点/github申请.png" alt="github申请"></p><h2 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h2><p><img src="/2018/11/07/建立这个站点/git建仓库.png" alt="git建仓库"></p><p><strong>注意：仓库名需要与你的github用户名一致</strong></p><p>这时，github page就自动生成了。地址是：https://{仓库名}.github.io</p><h1 id="使用hexo建立站点"><a href="#使用hexo建立站点" class="headerlink" title="使用hexo建立站点"></a>使用hexo建立站点</h1><p>需要环境：npm等</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="创建本地文件夹，用来放博客文件"><a href="#创建本地文件夹，用来放博客文件" class="headerlink" title="创建本地文件夹，用来放博客文件"></a>创建本地文件夹，用来放博客文件</h2><h2 id="进入该文件夹的powershell界面"><a href="#进入该文件夹的powershell界面" class="headerlink" title="进入该文件夹的powershell界面"></a>进入该文件夹的powershell界面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>会生成一批文件</p><p><img src="/2018/11/07/建立这个站点/hexo生成的文件" alt="hexo生成的文件.png"> </p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>_config.yml文件是配置文件，主要的配置项可以参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官方文档</a></p><p>一定要配置的有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&#123;仓库名&#125;/&#123;仓库名&#125;.github.io.git</span><br><span class="line">branch: gh-pages</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>此时可以打开页面：https://{仓库名}.github.io 查看博客详情</p><h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>本博客使用的是yelee主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure><p>下载完成后，会在项目themes目录下生成yelle文件夹 </p><p>修改项目根目录配置文件_config.yml，即可切换至Yelle主题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Yelee</span><br></pre></td></tr></table></figure><p><img src="/2018/11/07/建立这个站点/修改主题.png" alt="img"> </p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p>执行以下命令预览主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>yelee主题的诸多配置可以参考该说明 <a href="http://moxfive.coding.me/yelee/1.Getting-Started/" target="_blank" rel="noopener">yelee主题使用说明</a></p></the>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
